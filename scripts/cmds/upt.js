const os = require('os');
const { bold } = require("fontstyles"); 
const { GoatWrapper } = require("fca-liane-utils");

module.exports = {
  config: {
    name: 'uptime',
    aliases: ['upt', 'up'],
    version: '1.1.1',
    usePrefix: false,
    author: 'Rasin',
    countDown: 4,
    role: 2,
    shortDescription: 'bot upt stats',
    longDescription: {
      id: 'Display bot uptime and system stats with media ban check',
      en: 'bot stats'
    },
    category: 'system',
    guide: {
      id: '{pn}: Display bot uptime and system stats with media ban check',
      en: 'ntg'
    }
  },

  onStart: async function ({ message, event, usersData, threadsData, api }) {
    const startTime = Date.now();
    const users = await usersData.getAll();
    const groups = await threadsData.getAll();
    const uptime = process.uptime();

    try {
      const days = Math.floor(uptime / (3600 * 24));
      const hours = Math.floor((uptime % (3600 * 24)) / 3600);
      const minutes = Math.floor((uptime % 3600) / 60);
      const seconds = Math.floor(uptime % 60);

      const memoryUsage = process.memoryUsage();
      const totalMemory = os.totalmem();
      const freeMemory = os.freemem();
      const usedMemory = totalMemory - freeMemory;
      const memoryUsagePercentage = ((usedMemory / totalMemory) * 100).toFixed(2);

      const cpuUsage = os.loadavg();
      const cpuCores = os.cpus().length;
      const cpuModel = os.cpus()[0].model;
      const nodeVersion = process.version;
      const platform = os.platform();
      const networkInterfaces = os.networkInterfaces();

      const networkInfo = Object.entries(networkInterfaces).map(([iface, details]) => {
        return `‚Ä¢ ${iface}: ${details.map(info => `${info.family}: ${info.address}`).join(', ')}`;
      }).join('\n');

      const endTime = Date.now();
      const botPing = endTime - startTime;
      const totalMessages = users.reduce((sum, user) => sum + (user.messageCount || 0), 0);
      const mediaBan = await threadsData.get(event.threadID, 'mediaBan') || false;
      const mediaBanStatus = mediaBan ? 'üö´ Media is currently banned in this chat.' : '‚ò∫Ô∏è ùó†ùó≤ùó±ùó∂ùóÆ ùó∂ùòÄ ùóªùóºùòÅ ùóØùóÆùóªùóªùó≤ùó± ùó∂ùóª ùòÅùóµùó∂ùòÄ ùó∞ùóµùóÆùòÅ!';
      const uptimeResponse = uptime > 86400 ?  "" : "ùóúùòÅ'ùòÄ ùóÆùóπùóπ ùóøùó∂ùó¥ùóµùòÅ ü§ó";

      const loadingFrames = [
        '[‚ñ±‚ñ±‚ñ±‚ñ±‚ñ±‚ñ±‚ñ±‚ñ±‚ñ±‚ñ±]',
        '[‚ñ∞‚ñ±‚ñ±‚ñ±‚ñ±‚ñ±‚ñ±‚ñ±‚ñ±‚ñ±]',
        '[‚ñ∞‚ñ∞‚ñ∞‚ñ±‚ñ±‚ñ±‚ñ±‚ñ±‚ñ±‚ñ±]',
        '[‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ±‚ñ±‚ñ±]',
        '[‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞]'
      ];

      const editSegments = [
        `${bold("üôÜüèª‚Äç‚ôÇÔ∏è ùêòùê®ùêÆùê´ ùêíùê≤ùê¨ùê≠ùêûùê¶ ùêàùêßùêüùê® ùêàùê¨ ùêëùêûùêöùêùùê≤")}\n‚ùè ùó®ùóΩùòÅùó∂ùó∫ùó≤: „Äê ${days} „ÄëùóóùóÆùòÜùòÄ, „Äê ${hours} „ÄëùóõùóºùòÇùóøùòÄ, „Äê ${minutes} „Äëùó†ùó∂ùóªùòÇùòÅùó≤ùòÄ, „Äê ${seconds} „Äëùó¶ùó≤ùó∞ùóºùóªùó±ùòÄ\n‚ùè ùó†ùó≤ùó∫ùóºùóøùòÜ ùó®ùòÄùóÆùó¥ùó≤: ${(memoryUsage.rss / 1024 / 1024).toFixed(2)} ùó†ùóï`,
        `‚ùè ùóßùóºùòÅùóÆùóπ ùó†ùó≤ùó∫ùóºùóøùòÜ: ${(totalMemory / 1024 / 1024 / 1024).toFixed(2)} ùóöùóï\n‚ùè ùóôùóøùó≤ùó≤ ùó†ùó≤ùó∫ùóºùóøùòÜ: ${(freeMemory / 1024 / 1024 / 1024).toFixed(2)} ùóöùóï\n‚ùè ùó†ùó≤ùó∫ùóºùóøùòÜ ùó®ùòÄùóÆùó¥ùó≤: ${memoryUsagePercentage}%\n‚ùè ùóñùó£ùó® ùó®ùòÄùóÆùó¥ùó≤ (1m): ${cpuUsage[0].toFixed(2)}%`,
        `‚ùè ùóñùó£ùó® ùó®ùòÄùóÆùó¥ùó≤ (5m): ${cpuUsage[1].toFixed(2)}%\n‚ùè ùóñùó£ùó® ùó®ùòÄùóÆùó¥ùó≤ (15m): ${cpuUsage[2].toFixed(2)}%\n‚ùè ùóñùó£ùó® ùóñùóºùóøùó≤ùòÄ: ${cpuCores}\n‚ùè ùóñùó£ùó® ùó†ùóºùó±ùó≤ùóπ: ${cpuModel}`,
        `‚ùè ùó°ùóºùó±ùó≤.ùó∑ùòÄ ùó©ùó≤ùóøùòÄùó∂ùóºùóª: ${nodeVersion}\n‚ùè ùó£ùóπùóÆùòÅùó≥ùóºùóøùó∫: ${platform}\n‚ùè ùóΩùó∂ùóªùó¥: ${botPing}ùó∫ùòÄ\n‚ùè ùóßùóºùòÅùóÆùóπ ùó®ùòÄùó≤ùóøùòÄ: ${users.length}\n‚ùè  ùóßùóºùòÅùóÆùóπ ùóöùóøùóºùòÇùóΩùòÄ : ${groups.length}`,
        `‚ùè ${bold("ùó°ùó≤ùòÅùòÑùóºùóøùó∏ ùóúùóªùòÅùó≤ùóøùó≥ùóÆùó∞ùó≤ùòÄ")}\n${networkInfo}\n\n${uptimeResponse}`
      ];

      let sentMessage = await message.reply("s·¥õ·¥Ä Ä·¥õ…™…¥…¢ s ès·¥õ·¥á·¥ç ·¥Ä…¥·¥Ä ü ès…™s");

      const editMessageContent = (index) => {
        if (index < editSegments.length) {
          const loadingProgress = loadingFrames[index];
          const currentContent = `${loadingProgress}\n\n${editSegments.slice(0, index + 1).join('\n\n')}`;
          api.editMessage(currentContent, sentMessage.messageID, () => {
            setTimeout(() => editMessageContent(index + 1), 600);
          });
        }
      };

      editMessageContent(0);
    } catch (err) {
      console.error(err);
      return message.reply("‚ùå An error occurred while fetching system statistics.");
    }
  }
};


const wrapper = new GoatWrapper(module.exports);
wrapper.applyNoPrefix({ allowPrefix: true });